//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace SRenderToy.RenderService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RenderService.RenderServiceSoap")]
    public interface RenderServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/Render", ReplyAction="*")]
        System.IAsyncResult BeginRender(SRenderToy.RenderService.RenderRequest request, System.AsyncCallback callback, object asyncState);
        
        SRenderToy.RenderService.RenderResponse EndRender(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/AddImage", ReplyAction="*")]
        System.IAsyncResult BeginAddImage(SRenderToy.RenderService.AddImageRequest request, System.AsyncCallback callback, object asyncState);
        
        SRenderToy.RenderService.AddImageResponse EndAddImage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/HasName", ReplyAction="*")]
        System.IAsyncResult BeginHasName(SRenderToy.RenderService.HasNameRequest request, System.AsyncCallback callback, object asyncState);
        
        SRenderToy.RenderService.HasNameResponse EndHasName(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class RenderRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="Render", Namespace="http://tempuri.org/", Order=0)]
        public SRenderToy.RenderService.RenderRequestBody Body;
        
        public RenderRequest() {
        }
        
        public RenderRequest(SRenderToy.RenderService.RenderRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class RenderRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string file;
        
        public RenderRequestBody() {
        }
        
        public RenderRequestBody(string file) {
            this.file = file;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class RenderResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="RenderResponse", Namespace="http://tempuri.org/", Order=0)]
        public SRenderToy.RenderService.RenderResponseBody Body;
        
        public RenderResponse() {
        }
        
        public RenderResponse(SRenderToy.RenderService.RenderResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class RenderResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string RenderResult;
        
        public RenderResponseBody() {
        }
        
        public RenderResponseBody(string RenderResult) {
            this.RenderResult = RenderResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class AddImageRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="AddImage", Namespace="http://tempuri.org/", Order=0)]
        public SRenderToy.RenderService.AddImageRequestBody Body;
        
        public AddImageRequest() {
        }
        
        public AddImageRequest(SRenderToy.RenderService.AddImageRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class AddImageRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public byte[] img;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string name;
        
        public AddImageRequestBody() {
        }
        
        public AddImageRequestBody(byte[] img, string name) {
            this.img = img;
            this.name = name;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class AddImageResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="AddImageResponse", Namespace="http://tempuri.org/", Order=0)]
        public SRenderToy.RenderService.AddImageResponseBody Body;
        
        public AddImageResponse() {
        }
        
        public AddImageResponse(SRenderToy.RenderService.AddImageResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute()]
    public partial class AddImageResponseBody {
        
        public AddImageResponseBody() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class HasNameRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="HasName", Namespace="http://tempuri.org/", Order=0)]
        public SRenderToy.RenderService.HasNameRequestBody Body;
        
        public HasNameRequest() {
        }
        
        public HasNameRequest(SRenderToy.RenderService.HasNameRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class HasNameRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string name;
        
        public HasNameRequestBody() {
        }
        
        public HasNameRequestBody(string name) {
            this.name = name;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class HasNameResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="HasNameResponse", Namespace="http://tempuri.org/", Order=0)]
        public SRenderToy.RenderService.HasNameResponseBody Body;
        
        public HasNameResponse() {
        }
        
        public HasNameResponse(SRenderToy.RenderService.HasNameResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class HasNameResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public bool HasNameResult;
        
        public HasNameResponseBody() {
        }
        
        public HasNameResponseBody(bool HasNameResult) {
            this.HasNameResult = HasNameResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface RenderServiceSoapChannel : SRenderToy.RenderService.RenderServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RenderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RenderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class HasNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public HasNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RenderServiceSoapClient : System.ServiceModel.ClientBase<SRenderToy.RenderService.RenderServiceSoap>, SRenderToy.RenderService.RenderServiceSoap {
        
        private BeginOperationDelegate onBeginRenderDelegate;
        
        private EndOperationDelegate onEndRenderDelegate;
        
        private System.Threading.SendOrPostCallback onRenderCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddImageDelegate;
        
        private EndOperationDelegate onEndAddImageDelegate;
        
        private System.Threading.SendOrPostCallback onAddImageCompletedDelegate;
        
        private BeginOperationDelegate onBeginHasNameDelegate;
        
        private EndOperationDelegate onEndHasNameDelegate;
        
        private System.Threading.SendOrPostCallback onHasNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public RenderServiceSoapClient() {
        }
        
        public RenderServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RenderServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RenderServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RenderServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<RenderCompletedEventArgs> RenderCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddImageCompleted;
        
        public event System.EventHandler<HasNameCompletedEventArgs> HasNameCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SRenderToy.RenderService.RenderServiceSoap.BeginRender(SRenderToy.RenderService.RenderRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRender(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginRender(string file, System.AsyncCallback callback, object asyncState) {
            SRenderToy.RenderService.RenderRequest inValue = new SRenderToy.RenderService.RenderRequest();
            inValue.Body = new SRenderToy.RenderService.RenderRequestBody();
            inValue.Body.file = file;
            return ((SRenderToy.RenderService.RenderServiceSoap)(this)).BeginRender(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SRenderToy.RenderService.RenderResponse SRenderToy.RenderService.RenderServiceSoap.EndRender(System.IAsyncResult result) {
            return base.Channel.EndRender(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private string EndRender(System.IAsyncResult result) {
            SRenderToy.RenderService.RenderResponse retVal = ((SRenderToy.RenderService.RenderServiceSoap)(this)).EndRender(result);
            return retVal.Body.RenderResult;
        }
        
        private System.IAsyncResult OnBeginRender(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string file = ((string)(inValues[0]));
            return this.BeginRender(file, callback, asyncState);
        }
        
        private object[] OnEndRender(System.IAsyncResult result) {
            string retVal = this.EndRender(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRenderCompleted(object state) {
            if ((this.RenderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RenderCompleted(this, new RenderCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RenderAsync(string file) {
            this.RenderAsync(file, null);
        }
        
        public void RenderAsync(string file, object userState) {
            if ((this.onBeginRenderDelegate == null)) {
                this.onBeginRenderDelegate = new BeginOperationDelegate(this.OnBeginRender);
            }
            if ((this.onEndRenderDelegate == null)) {
                this.onEndRenderDelegate = new EndOperationDelegate(this.OnEndRender);
            }
            if ((this.onRenderCompletedDelegate == null)) {
                this.onRenderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRenderCompleted);
            }
            base.InvokeAsync(this.onBeginRenderDelegate, new object[] {
                        file}, this.onEndRenderDelegate, this.onRenderCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SRenderToy.RenderService.RenderServiceSoap.BeginAddImage(SRenderToy.RenderService.AddImageRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddImage(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginAddImage(byte[] img, string name, System.AsyncCallback callback, object asyncState) {
            SRenderToy.RenderService.AddImageRequest inValue = new SRenderToy.RenderService.AddImageRequest();
            inValue.Body = new SRenderToy.RenderService.AddImageRequestBody();
            inValue.Body.img = img;
            inValue.Body.name = name;
            return ((SRenderToy.RenderService.RenderServiceSoap)(this)).BeginAddImage(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SRenderToy.RenderService.AddImageResponse SRenderToy.RenderService.RenderServiceSoap.EndAddImage(System.IAsyncResult result) {
            return base.Channel.EndAddImage(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private void EndAddImage(System.IAsyncResult result) {
            SRenderToy.RenderService.AddImageResponse retVal = ((SRenderToy.RenderService.RenderServiceSoap)(this)).EndAddImage(result);
        }
        
        private System.IAsyncResult OnBeginAddImage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            byte[] img = ((byte[])(inValues[0]));
            string name = ((string)(inValues[1]));
            return this.BeginAddImage(img, name, callback, asyncState);
        }
        
        private object[] OnEndAddImage(System.IAsyncResult result) {
            this.EndAddImage(result);
            return null;
        }
        
        private void OnAddImageCompleted(object state) {
            if ((this.AddImageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddImageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddImageAsync(byte[] img, string name) {
            this.AddImageAsync(img, name, null);
        }
        
        public void AddImageAsync(byte[] img, string name, object userState) {
            if ((this.onBeginAddImageDelegate == null)) {
                this.onBeginAddImageDelegate = new BeginOperationDelegate(this.OnBeginAddImage);
            }
            if ((this.onEndAddImageDelegate == null)) {
                this.onEndAddImageDelegate = new EndOperationDelegate(this.OnEndAddImage);
            }
            if ((this.onAddImageCompletedDelegate == null)) {
                this.onAddImageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddImageCompleted);
            }
            base.InvokeAsync(this.onBeginAddImageDelegate, new object[] {
                        img,
                        name}, this.onEndAddImageDelegate, this.onAddImageCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SRenderToy.RenderService.RenderServiceSoap.BeginHasName(SRenderToy.RenderService.HasNameRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginHasName(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginHasName(string name, System.AsyncCallback callback, object asyncState) {
            SRenderToy.RenderService.HasNameRequest inValue = new SRenderToy.RenderService.HasNameRequest();
            inValue.Body = new SRenderToy.RenderService.HasNameRequestBody();
            inValue.Body.name = name;
            return ((SRenderToy.RenderService.RenderServiceSoap)(this)).BeginHasName(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SRenderToy.RenderService.HasNameResponse SRenderToy.RenderService.RenderServiceSoap.EndHasName(System.IAsyncResult result) {
            return base.Channel.EndHasName(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private bool EndHasName(System.IAsyncResult result) {
            SRenderToy.RenderService.HasNameResponse retVal = ((SRenderToy.RenderService.RenderServiceSoap)(this)).EndHasName(result);
            return retVal.Body.HasNameResult;
        }
        
        private System.IAsyncResult OnBeginHasName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string name = ((string)(inValues[0]));
            return this.BeginHasName(name, callback, asyncState);
        }
        
        private object[] OnEndHasName(System.IAsyncResult result) {
            bool retVal = this.EndHasName(result);
            return new object[] {
                    retVal};
        }
        
        private void OnHasNameCompleted(object state) {
            if ((this.HasNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.HasNameCompleted(this, new HasNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void HasNameAsync(string name) {
            this.HasNameAsync(name, null);
        }
        
        public void HasNameAsync(string name, object userState) {
            if ((this.onBeginHasNameDelegate == null)) {
                this.onBeginHasNameDelegate = new BeginOperationDelegate(this.OnBeginHasName);
            }
            if ((this.onEndHasNameDelegate == null)) {
                this.onEndHasNameDelegate = new EndOperationDelegate(this.OnEndHasName);
            }
            if ((this.onHasNameCompletedDelegate == null)) {
                this.onHasNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnHasNameCompleted);
            }
            base.InvokeAsync(this.onBeginHasNameDelegate, new object[] {
                        name}, this.onEndHasNameDelegate, this.onHasNameCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SRenderToy.RenderService.RenderServiceSoap CreateChannel() {
            return new RenderServiceSoapClientChannel(this);
        }
        
        private class RenderServiceSoapClientChannel : ChannelBase<SRenderToy.RenderService.RenderServiceSoap>, SRenderToy.RenderService.RenderServiceSoap {
            
            public RenderServiceSoapClientChannel(System.ServiceModel.ClientBase<SRenderToy.RenderService.RenderServiceSoap> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginRender(SRenderToy.RenderService.RenderRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("Render", _args, callback, asyncState);
                return _result;
            }
            
            public SRenderToy.RenderService.RenderResponse EndRender(System.IAsyncResult result) {
                object[] _args = new object[0];
                SRenderToy.RenderService.RenderResponse _result = ((SRenderToy.RenderService.RenderResponse)(base.EndInvoke("Render", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddImage(SRenderToy.RenderService.AddImageRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("AddImage", _args, callback, asyncState);
                return _result;
            }
            
            public SRenderToy.RenderService.AddImageResponse EndAddImage(System.IAsyncResult result) {
                object[] _args = new object[0];
                SRenderToy.RenderService.AddImageResponse _result = ((SRenderToy.RenderService.AddImageResponse)(base.EndInvoke("AddImage", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginHasName(SRenderToy.RenderService.HasNameRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("HasName", _args, callback, asyncState);
                return _result;
            }
            
            public SRenderToy.RenderService.HasNameResponse EndHasName(System.IAsyncResult result) {
                object[] _args = new object[0];
                SRenderToy.RenderService.HasNameResponse _result = ((SRenderToy.RenderService.HasNameResponse)(base.EndInvoke("HasName", _args, result)));
                return _result;
            }
        }
    }
}
